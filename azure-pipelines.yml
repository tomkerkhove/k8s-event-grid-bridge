name: $(Date:yyyyMMdd)$(Rev:.r)
variables:
  DotNet.SDK.Version: '2.2.103'
  solution: 'src/Kubernetes.EventBridge.sln'
  buildConfiguration: 'Release'
  Image.TaggedName: '$(Image.Name):$(Build.BuildNumber)'
  Image.Name: tomkerkhove/k8s-event-bridge-ci
  Image.Port: 8888
trigger:
- master
pr:
- master
jobs:
- job: Build
  displayName: Verify Codebase & Tests
  pool:
    vmImage: 'Ubuntu-16.04'
  steps:
  - task: DotNetCoreInstaller@0
    displayName: 'Install .NET SDK'
    inputs:
      version: '$(DotNet.SDK.Version)'

  - task: DotNetCoreCLI@2
    displayName: 'Restore NuGet Packages'
    inputs:
      command: restore
      projects: '$(solution)'

  - task: DotNetCoreCLI@2
    displayName: 'Build'
    inputs:
      projects: '$(solution)'
      arguments: '--configuration $(buildConfiguration)'
   
- job: Docker
  displayName: Verify Docker Image
  pool:
    vmImage: 'Ubuntu-16.04'
  steps:
  - powershell: |
      $prNumber = '$(System.PullRequest.PullRequestNumber)'
      $buildNumber = '$(Build.BuildNumber)'
      Write-Host "Initial build number: '$buildNumber'"
      Write-Host "PR Number '$prNumber'"
      $buildNumber = 'PR$(System.PullRequest.PullRequestNumber)'
      Write-Host "##vso[build.updatebuildnumber]$buildNumber"
      Write-Host "Build number is '$buildNumber'"
    displayName: 'Change Build Number to PR format'
    condition: eq(variables['Build.Reason'], 'PullRequest')

  - task: Docker@1
    displayName: 'Build Docker image'
    inputs:
      dockerFile: ./src/Kubernetes.EventBridge.Host/Dockerfile
      arguments: '-t $(Image.TaggedName)'
      useDefaultContext: false
      buildContext: ./src/
      imageName: '$(Image.TaggedName)'

  # This is deliberately turned off until we've improved the Kubernetes authentication
  # A follow-up PR will be doen for this
  #- task: Docker@1
  #  displayName: 'Run Docker image'
  #  inputs:
  #    command: 'Run an image'
  #    imageName: '$(Image.TaggedName)'
  #    ports: '$(Image.Port):80'
  #- bash: |
  #    sleep 5
  #    curl -X GET "http://localhost:$(Image.Port)/api/v1/health" -H "accept: application/json" --include
  #  displayName: 'Ping Health endpoint'

  - task: Docker@1
    displayName: 'Push ''tomkerkhove/k8s-event-bridge-ci'' image to Docker Hub'
    inputs:
      containerregistrytype: 'Container Registry'
      dockerRegistryEndpoint: 'Docker Hub'
      command: 'Push an image'
      imageName: '$(Image.TaggedName)'
    condition: eq(variables['Build.Reason'], 'PullRequest')